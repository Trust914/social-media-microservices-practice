version: "3.8"

services:
  api-gateway:
    container_name: api_gateway
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./.env
      - ./api-gateway/.env
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
  identity-service:
    container_name: identity_service
    build:
      context: ./identity-service/
      dockerfile: Dockerfile
    env_file:
      - ./.env
      - ./identity-service/.env
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      nosql_db:
        condition: service_healthy

  post-service:
    container_name: post_service
    build:
      context: ./post-service/
      dockerfile: Dockerfile
    env_file:
      - ./.env
      - ./post-service/.env
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      nosql_db:
        condition: service_healthy

  media-service:
    container_name: media_service
    build:
      context: ./media-service/
      dockerfile: Dockerfile
    env_file:
      - ./.env
      - ./media-service/.env
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      nosql_db:
        condition: service_healthy

  search-service:
    container_name: search_service
    build:
      context: ./search-service/
      dockerfile: Dockerfile
    env_file:
      - ./.env
      - ./search-service/.env
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      nosql_db:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    env_file:
      - ./.env
    volumes:
      - redis_data:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5673:5672"
      - "15673:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 20s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    env_file:
      - ./.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  nosql_db:
    container_name: nosql_db
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - nosql_db_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.adminCommand(\"ping\").ok'", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

volumes:
  redis_data:
  rabbitmq_data:
  nosql_db_data:
